//--- [START declaration] ---//
syntax = "proto3";
package FlightControl;
//--- [END declaration] ---//

import "base/geometry.proto";
import "base/common.proto";

//--- [START shared enums] ---//



enum EmergencyRouteType{ //slot number is the same as enum value
    RHNoComm = 0;
    RHEngineFailure1 = 1;
    RHEngineFailure2 = 2;
    RHElectricFailure1 = 3;
    RHElectricFailure2 = 4;
    RHMinorFailure = 5;
    RHAvionicFailure = 6;
    RHNonAvionicFailure = 7;
}

enum NormalRouteType{ //slot number is the enum value + num of emergency routes types (8)
    Launch = 0;
    CTRArrival = 1;
    CTRDeparture = 2;
    TransitToArea = 3;
    TransitFromArea = 4;
    FlightInDelivery = 5;
    LaunchToPivotDestination = 6;

    //RH
    RHPivotDestinationToLP = 7; // RH not for emergency
}

enum TurnDirection{
    CW = 0;
    CCW = 1;
}

enum OnOffSwitch{
    On = 0;
    Off = 1;
}

enum AltitudeChangeType{
    BestDistance = 0;
    BestEndurance = 1;
    MaxROC = 2;
    Manual_ROC = 3;
    Graduate = 4;
    Circle = 5;
}

// --- [End shared enums] --- //

// --- [Start data classes] --- //

message WPAltitudeChange
{
    AltitudeChangeType alt_change_type = 1;
    optional float manual_roc = 2;      //  in case of AltitudeChangeType.Manual_ROC
    optional float circular_radius = 3;   //  in case of AltitudeChangeType.Circle
}

message AltitudeChange
{
    AltitudeChangeType alt_change_type = 1;
    float requested_altitude = 2; // according to discretization
    optional float manual_roc = 3;      //  in case of AltitudeChangeType.Manual_ROC
    optional float circular_radius = 4;   //  in case of AltitudeChangeType.Circle
}

message SpeedCommand{
    enum SpeedCommandType{
        VTAS = 0;
        Max_Speed = 1;
        OptimalRange_Speed = 2;
        Loiter_Speed = 3;
    }
    SpeedCommandType speed_command_type = 1;
    optional float vtas_value = 2;
}

message HoldManeuver{
    enum HoldManeuverType{
        Circular = 0; // circular_radius, turn_direction
        Figure8 = 1; // Not relevant for current version
        RaceTrack = 2; // Not relevant for current version
        Sector = 3; // circular_radius, bearing, length, turn_direction
    }
    HoldManeuverType maneuver_type = 1;
    float circular_radius = 2; 
    optional float bearing = 3;  // Azimuth North CW
    optional float length = 4;
    optional float width = 5;
    optional TurnDirection turn_direction = 6;
}

message WaypointHold{
    HoldManeuver maneuver = 1;
    optional int32 laps_num_limit = 2;
    optional Common.Time hold_until_time = 3;
    optional float energy_limit = 4; // [percentage]
    optional float alt_limit = 5;
}

message UserHoldCommand{
    float circular_radius = 2;
}

message EOZoom
{
    enum ZoomType{
        Continues = 0;
        Fields = 1;
        WFOV = 2;
        NFOV = 3;
    }
    ZoomType zoom_type = 1;
    float manual_zoom = 2;
}

message Timer{
    enum TimerType{
        Timer = 0;
        Limit = 1;
    }
    TimerType timer_type = 1;
    optional Common.Time timer_time = 2;    //in case TimerType.Timer

}

message EOStatus{
    enum EOMode{
        EO = 0;
        IR = 1;
        EOAndIR = 2;
    }
    EOMode eo_mode = 1;
    enum ShutterMode{
        Auto = 0;
        Open = 1;
    }
    optional ShutterMode shutter_mode = 2; // only eo
    enum NUC{
        NUC1 = 0;
        NUC2 = 1;
        NUC3 = 2;
        NUC4 = 3;
    }
    optional NUC active_nuc_table = 3; //only ir
    enum IRPolarity{
        BlackHot = 0;
        WhiteHot = 1;
    }
    optional IRPolarity ir_polarity = 4; //only ir
    EOZoom eo_zoom = 5;
    float focus = 6;
    float gain = 7; // ir only
    float level = 8; // ir only
    enum ROIPosition{
        Full = 0;
        Half = 1;
        Quarter = 2;
    }
    ROIPosition roi_pos = 9;// ir only
    enum VideoFilter{
        None = 0;
        Inhanced = 1;
        Sharpen = 2;
        Both = 3;
    }
    VideoFilter video_filter = 10; //eo
    OnOffSwitch calibration_mode = 11;
    OnOffSwitch nuc_calibration = 12;   //ir
    enum Tracker{
        Off = 0;
        POI = 1;
        Area = 2;
        Retrack = 3;
    }
    Tracker tracker = 13;
}

message StaringPoint{
    enum StaringPointType{
        ManualPOI = 0;
        GroundController = 1;
        POI = 2;
    }
    StaringPointType staring_point_type = 1;
    Timer staring_timer = 2;                    // preparation for cycle staring
    optional EOStatus eo_status = 3;
    repeated Common.ID staring_point_id = 4;  // in case of POI or ground controller
    repeated Geom.GeoCoordinate3D pos = 5; // in case of manual POI
}

message SensorActions{

    enum SensorActionMode{
        Sensor_Action_Yes = 0;
        Sensor_Action_No = 1;
    }
    optional SensorActionMode sensor_action_mode = 1;
    optional StaringPoint stare_point = 2;
}

message TxRxControl{
    optional Common.Time standby_until_time = 2;  // [UTC]
}


message EngageLP{
    Common.ID lp_id = 1;
    optional float bearing = 2;
}

message CameraGuideLookDown{
    enum CameraGuideLookDownType{
        DownAngle = 0;
        POIDistance = 1; // Not relevant in the current ICD version
    }
    CameraGuideLookDownType look_down_type = 1;
    optional float look_down_angle = 2; //in case DownAngle.DownAngle
    optional float POI_distance = 3; //in case DownAngle.POIDistance
}

message CameraGuideCommand{
    enum CameraGuideManeuverType{
        Circular = 0;
        Sector = 1;
    }
    CameraGuideManeuverType maneuver_type = 1;
    CameraGuideLookDown look_down = 2;
    optional TurnDirection turn_direction = 3; // in case CameraGuideManeuverType = Circular
    optional float bearing = 4;  // in case CameraGuideManeuverType.CGSector: [rad] North to East
    optional float length = 5;   // in case CameraGuideManeuverType.CGSector: [rad] sector half angle
}

enum SensorControl{
    Turn_On_Sensor_Control = 0;
    Turn_Off_Sensor_Control = 1;
    Standby_Sensor_Control = 2;
}


message FlightUserDirectRequests{
    Common.ID direct_command_id = 1;
    Common.ID drone_id = 2;
    optional OnOffSwitch nav_lights = 3;        //4586: 2007
    optional OnOffSwitch landing_lights = 4;    //4586: 2007
    repeated SensorControl sensor_control = 5;  // also optional
    repeated SensorActions sensor_action = 6; // after user request
    oneof user_position_request{
        AltitudeChange alt_change = 7;
        bool hold_request = 8; // changing to manual mode - pivot conservation keeps planning - routes won't be sent
        Geom.GeoCoordinate3D ntc_request = 9; // coordinate only in flight area - received from user and transformed to route - change destination point in gantt
        bool return_to_main_lp = 10;
        EmergencyRouteType rh_request = 11;
        EngageLP elp_engage = 12;
        bool return_to_full_system_control = 13; // cancel hold
    }
    optional SpeedCommand speed_command = 14;
    optional TxRxControl tx_rx_control = 15;
    optional float min_agl_command = 16;
    optional float min_energy_command = 17;//  0-1 // changes due to weather
    optional float min_vel_command = 18; // changes due to weather
    optional AirSpaceAltitudeLimits air_space_altitude_limits = 19;
}

message AirSpaceAltitudeLimits{
    Common.ID air_space_id = 1;
    optional float minimum_altitude_limit = 2;
    optional float maximum_altitude_limit = 3;
}



message EmergencySite{
    Common.ID emergency_lp_id = 1;
    Geom.GeoCoordinate3D pos = 2;
    enum EmergencySitePriorityType{
        Recovery1 = 0;
        Recovery2 = 1;
        Recovery3 = 2;
        Recovery4 = 3;
        Recovery5 = 4;
        Crash1 = 5;
        Crash2 = 6;
        Crash3 = 7;
        Crash4 = 8;
        Crash5 = 9;
    }
    EmergencySitePriorityType site_priority_type = 3;
}

message DroneBoundingAreaVolume{
    Common.ID drone_id = 1;
    Common.ID bounding_area_id = 2;
    oneof area{
        Geom.Polygon3D polygon = 3;
        Geom.Cylinder cylinder = 4;
    }
    optional Common.TimeWindow time_window = 5; // for no-comm route
}

message DroneRouteType{
    Common.ID drone_id = 1;
    oneof route_type{
        NormalRouteType regular = 3;
        EmergencyRouteType emergency = 5;
    }
}

message FaultStatus{
    enum DroneAvailability{
        Nominal = 0;
        Caution = 1;
        Warning = 2;
        Emergency = 3;
        Failed = 4;
    }
    enum MalfunctionType{
        Engine = 0;
        Electrical = 1;
        Navigation = 2;
        Anemometry = 3;
        Power_Box = 4;
        WFL = 5;
        Post_Nav = 6;
        Autopilot = 7;
        Deicing = 8;
        Performance = 9;
        Recorder = 10;
        AFC_Bank_A = 11;
        AFC_Bank_B = 12;
        Worst_Subsystem_Status = 13;
    }
    DroneAvailability drone_availability = 1;
    repeated MalfunctionType drone_malfunction_type = 2;
}

message MedicineStatus{
    enum MedicinePackageStatus{
        Empty = 0;
        Occupied = 1;
        Ready = 2;
        Released = 3;
    }
    repeated MedicinePackageStatus medicine_package_status = 2;
}

message PayloadData{
    Geom.GeoCoordinate3D staring_point = 1;
    Geom.HorizontalCoordinate staring_angles = 2;
    optional MedicineStatus medicine_status = 3;  // Only relevant for certain package types
}

message DroneStatus // all data Received in one message
{
    enum FlightMode{
        Route = 0;
        CameraGuide = 1;
        Recovery = 2;
        FlightToEmergencySite = 3;
        Launch = 4;
        Hold = 5;
        NTC = 6;
        SafetyHold = 7;
        ToLocation = 8;
        OnGround = 9;
    }
    FlightMode flight_mode = 1;
    Geom.GeoCoordinate3D position = 2;
    Geom.Vector3D velocity = 3;
    Geom.Orientation orientation = 4;
    optional Geom.Vector2D wind_measurement = 5;
    float energy = 6;  // [0-empty, 1-full]
    optional float energy_usage_rate = 7;  // Mandatory after initial data
    optional Common.Time return_home_time = 8;  // time of a direct flight to LP
    FaultStatus fault_status = 9;
    optional string flight_plan_version = 10;  // when in route
    optional string route_version = 12;  // when in route
    optional Common.ID bounding_area_id = 14;  // Mandatory after initial data
    repeated Geom.TimedGeoCoordinate3D predicted_trajectory = 15;  // in route at first stage receives only next waypoint on route
    optional Common.ID direct_command_id = 16;  // Only relevant when there is a direct command
    optional CameraGuideCommand camera_guide_data = 17; // Only relevant when currently performing camera guide
    optional HoldManeuver hold_data = 18; // Only relevant when currently performing hold
    optional PayloadData payload_data = 19;
}

message DroneDynamicData
{
    Common.ID drone_id = 1;
    Common.Time reference_time = 2; /** [sec.msec] from 1/1/1970 - logical time from the drone, not message creation time */
    DroneStatus drone_status = 3;
    Common.PackageType package = 4; // Adding package type, to avoid using Drone Static Data object for the time being
}

message DroneStaticData
{
  Common.ID drone_id = 1;
  Common.PackageType package = 2;
  Common.TimeWindow ground_availability_time_window = 3;
  Common.ID launch_ctr = 4;
  Common.ID recovery_ctr = 5;
}

message DroneSkyPictureData // all data Received in one message
{
    enum FlightMode{
        Route = 0;
        CameraGuide = 1;
        Recovery = 2;
        FlightToEmergencySite = 3;
        Launch = 4;
        Hold = 5;
        NTC = 6;
        SafetyHold = 7;
        ToLocation = 8;
        OnGround = 9;
    }
    
    Common.ID drone_id = 1;
    FlightMode flight_mode = 2;
    Geom.GeoCoordinate3D position = 3;
    Geom.Vector3D velocity = 4;
    Geom.Orientation orientation = 5;
    float energy = 6;  // [0-empty, 1-full]
    repeated Geom.TimedGeoCoordinate3D predicted_trajectory = 7;  // in route at first stage receives only next waypoint on route
    optional float current_propulsion_energy_level = 8;  // does not exists - can return the last value we gave
    optional int64 fuel_bingo_time = 9; //  [sec] // does not exists
    optional bool lights_mode = 10;  //  true=on, false=off, last known status // dont have 
    optional float true_airspeed = 11; // [MeterPerSec]
    optional float barometric_altitude = 12; 
    optional float mission_bingo_time = 13;
}
// --- [End data classes] --- //



// -- [New Flight Plan] -- //

message Waypoint { //13002
    double waypoint_to_lattitude = 1;
    double waypoint_to_longitude = 2;
    LocationType location_type = 3;
    TurnType turn_type = 4;
    optional ActionsMsg actions = 5;
  }

  message Elp {//55010
    double latitude = 1;
    double longitude = 2;
    ActionElp action = 3; 
  }


message LandingPoint {//55010
    double latitude = 1;
    double longitude = 2;
  }

  message ActionsMsg {
    repeated AirframeAction airframe_action = 1;
    optional LoiterAction loiter_action = 2;
    //will be updated to support multiple sensors
    repeated PayloadAction payload_action = 3;
    optional SpeedAction speed_action = 4;
    optional AltitudeAction altitude_action = 5;

}

message AirframeAction { //13005
    
    AirFrameFunction air_frame_function = 1;
    EnumState enum_state = 2;
}


message AltitudeAction{
    double commanded_altitude = 1;
    AltitudeType altitude_type = 2;
    AltitudeChangeBehaviour altitude_change_behavior = 3;
}


message LoiterAction { //13003
    LoiterType loiter_type = 1; 
    double loiter_radius = 2; 
    optional double loiter_length = 3;
    optional LoiterLengthUnits loiter_length_units = 4;
    optional int32 loiter_bearing = 5;
    optional LoiterDirection loiter_direction = 6;
    optional double loiter_speed = 7;
    optional SpeedType speed_type = 8;
    optional uint32 loiter_duration = 9;
    optional LoiterDurationUnits loiter_duration_units = 10;
    FlyingBehaviour flying_behaviour = 11; 
}


message PayloadAction { //13004
    double starepoint_latitude = 1;
    double starepoint_longitude = 2;
    double starepoint_altitude = 3;
    AltitudeType altitude_type = 4;
    PlatformPower platform_power = 5;
}

message SpeedAction {
    double commanded_speed = 1;
    SpeedType speed_type = 2;
    SpeedMode speed_mode = 3;
}




enum MissionPlanMode{
    CLEAR_ROUTE = 0;
    CLEAR_MISSION = 1;
    TRANSMIT_MISSION = 2;
    RECIEVE_MISSION = 3;
    RECEIVE_SINGLE = 4;
    CANCEL_TRANSMIT_RECEIVE = 5;
    RECEIVE_ALL_ACTIVITY_STATUS = 6;
}


enum Status{
    IN_PROGRESS = 0;
    COMPLETE = 1;
    ABORTED_REJECTED = 2;
}

enum RouteType {
    LAUNCH = 0;
    APPROACH = 1;
    FLIGHT = 2;
    CONTINGENCY_A = 3;
    CONTINGENCY_B = 4;
    RETURN_HOME_P =5;
}

enum JoiningMode {
    FIRST_WAYPOINT = 0;
    NEAREST_WAYPOINT = 1;
    NEAREST_PATH = 2;
    // SPECIFIC_WAYPOINT = 3;
}

enum LocationType {
    ABSOLUTE = 0;
    RELATIVE = 1;
}

enum AltitudeType {
    PRESSURE_ALTITUDE = 0;
    BARO_ALTITUDE = 1;
    AGL = 2;
    WGS_84 = 3;
}

enum PlatformPower {
    OFF = 0;
    STANDBY_POWER = 1;
    ON = 2;
    RESTART_P = 3;
}

enum AltitudeChangeBehaviour {
    MANUAL = 0;
    CRITICAL_ALTITUDE = 1;
    GRADUAL = 2;
    MAX_RATE = 3;
    UAV_DEPENDENT = 4;
    NOT_DEFINED = 5;
}

enum SpeedType {
    INDICATED_AIRSPEED = 0;
    TRUE_AIRSPEED = 1;
    GROUND_SPEED = 2;
    THRUST = 3;
}

enum SpeedMode {
    MANUAL = 0;
    MAXIMUM_SPEED = 1;
    OPTIMAL_RANGE = 2;
    OPTIMAL_ENDURANCE = 3;
}

enum TurnType {
    SHORT_TURN = 0;
    FLYOVER = 1;
}


enum LoiterType {
    CIRCULAR = 0;
    RACETRACK = 1;
    FIGURE_8 = 2;
    HOVER = 3;
    ATC_HOLD = 4;
    SECTOR_P = 5;
    FLOWER_P = 6;
}


enum LoiterLengthUnits {
    DISTANCE = 0;
    TIME = 1;
    ANGLE_P = 2;
}

enum LoiterDirection {
    VEHICLE_DEPENDENT = 0;
    CLOCKWISE = 1;
    COUNTER_CLOCKWISE = 2;
    INTO_THE_WIND = 3;
}


enum FlyingBehaviour {
    FLYBY = 0;
    FLYOVER = 1;
    VEHICLE_DISCRETION = 3;
}

enum LoiterDurationUnits {
    LAPS = 0;
    SECONDS = 1;
    UNTIL_TIME_P = 2;
    UNTIL_FEUL_WEIGHT_TENTH_KG_P = 3;
    UNTIL_BINGO_FEUL_P = 4;
    UNTIL_ALTITUDE_P = 5;
}

enum AirFrameFunction {
    NAVIGATION_LIGHTS = 0;
    STROBE_LIGHTS = 1;
    PRIMARY_DATA_LINK = 2;
    SECONDARY_DATA_LINK = 3;
    NAVIGATION_IR_LIGHTS = 4;
    STROBE_IR_LIGHTS = 5;
    NVD_COMPATIBLE = 6;
    LANDING = 7;
    LANDING_IR = 8;
}

enum EnumState {
    TURN_OFF = 0;
    TURN_ON = 1;
    GO_TO_STANDBY = 2;
    RECEIVE_ONLY = 3;
    TRANSMIT_ONLY = 4;
    LOW_POWER_P = 5;
    HIGH_POWER_P = 6;
}

enum LandingPointType {
    REGULAR_LANDING_POINT = 0;
    MAIN_LANDING_POINT = 1;
}


enum ActionElp {
    RECOVERY_ELP_LANDING = 0;
    CRASH_ELP_LANDING = 1;
    RECOVERT_OR_ELP_LANDING_DETERMINED_BY_AREA = 2;
}

